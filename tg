from telethon import TelegramClient, events
from telethon.tl.functions.messages import CreateChatRequest
from telethon.tl.types import InputUser

# --- Конфигурация бота ---
# Получите API ID и API Hash на my.telegram.org
API_ID = ВАШ_API_ID  # Замените на ваш API ID
API_HASH = 'ВАШ_API_HASH' # Замените на ваш API Hash (в кавычках)
PHONE_NUMBER = 'ВАШ_НОМЕР_ТЕЛЕФОНА' # Замените на номер телефона аккаунта, от которого будет работать бот (например, '+79123456789')
SESSION_NAME = 'my_telegram_user_session' # Имя файла сессии, где будут храниться данные авторизации

# Список ников или ID пользователей для автоматического добавления в первую беседу
# Пример: ['@username1', '@username2', '123456789']
DEFAULT_USERS_TO_ADD = [
    # Добавьте сюда ники или ID пользователей, например:
    # '@user_one',
    # '123456789', # Пример ID пользователя
    # 'another_user_nickname',
]

# Название для первой беседы, создаваемой по команде /create_default_chat
DEFAULT_CHAT_TITLE = 'Автоматическая беседа'

# Базовое название для бесед, создаваемых по команде /create_chat_with_user
SECONDARY_CHAT_BASE_TITLE = 'Беседа с '

# --- Инициализация клиента Telethon ---
# Создаем клиент Telegram, который будет работать как пользовательский аккаунт
client = TelegramClient(SESSION_NAME, API_ID, API_HASH)

# --- Обработчик команды /start ---
# При получении сообщения "/start" в личном чате с ботом, он ответит приветствием.
@client.on(events.NewMessage(pattern='/start'))
async def start_handler(event):
    # Проверяем, что команда отправлена в личный чат
    if event.is_private:
        await event.respond('Привет! Я готов создавать беседы от имени вашего аккаунта.')
    else:
        # Если команда отправлена в группе, игнорируем или отвечаем, что это личная команда
        pass

# --- Обработчик команды для создания первой беседы ---
# Эта команда создаст беседу и добавит в нее пользователей из DEFAULT_USERS_TO_ADD.
# Использование: /create_default_chat
@client.on(events.NewMessage(pattern='/create_default_chat'))
async def create_default_chat_handler(event):
    # Убедимся, что команда отправлена в личный чат с ботом, чтобы избежать случайных срабатываний в группах.
    if event.is_private:
        await event.respond('Начинаю создание стандартной беседы...')
        try:
            # Получаем объекты InputUser для каждого пользователя из списка
            # Это необходимо для добавления пользователей в чат
            participants_entities = []
            for user_identifier in DEFAULT_USERS_TO_ADD:
                try:
                    # Пытаемся получить сущность пользователя (объект, представляющий пользователя)
                    user_entity = await client.get_entity(user_identifier)
                    # Создаем InputUser объект, который нужен для CreateChatRequest
                    participants_entities.append(InputUser(user_entity.id, user_entity.access_hash))
                except Exception as e:
                    # Если пользователя не удалось найти, сообщаем об этом и прекращаем операцию
                    await event.respond(f"Ошибка: Не удалось найти пользователя '{user_identifier}'. Проверьте ник или ID. {e}")
                    return # Прерываем выполнение, если не удалось найти кого-то из списка

            if not participants_entities:
                await event.respond("Ошибка: Список пользователей для добавления пуст. Добавьте пользователей в DEFAULT_USERS_TO_ADD.")
                return

            # Создаем новую беседу (групповой чат)
            # CreateChatRequest требует список InputUser объектов и название чата
            result = await client(CreateChatRequest(
                users=participants_entities,
                title=DEFAULT_CHAT_TITLE
            ))
            # Отправляем подтверждение об успешном создании
            await event.respond(f'Стандартная беседа "{DEFAULT_CHAT_TITLE}" успешно создана!')
        except Exception as e:
            # Обработка любых ошибок, которые могут возникнуть в процессе
            await event.respond(f'Произошла ошибка при создании стандартной беседы: {e}')
    else:
        await event.respond('Эту команду можно использовать только в личном чате со мной.')

# --- Обработчик команды для создания беседы с указанным пользователем ---
# Эта команда создаст беседу с одним конкретным пользователем, чей ник будет указан.
# Использование: /create_chat_with_user @ник_пользователя
@client.on(events.NewMessage(pattern='/create_chat_with_user (.+)'))
async def create_chat_with_user_handler(event):
    # Убедимся, что команда отправлена в личный чат с ботом
    if event.is_private:
        # Извлекаем ник пользователя из сообщения
        username_to_add = event.pattern_match.group(1).strip()
        await event.respond(f'Начинаю создание беседы с {username_to_add}...')
        try:
            # Получаем сущность пользователя по его нику
            user_entity = await client.get_entity(username_to_add)
            # Создаем список из одного InputUser объекта для этого пользователя
            participants = [InputUser(user_entity.id, user_entity.access_hash)]

            # Формируем название беседы, используя имя пользователя
            chat_title = f"{SECONDARY_CHAT_BASE_TITLE}{user_entity.first_name or username_to_add}"

            # Создаем новую беседу
            result = await client(CreateChatRequest(
                users=participants,
                title=chat_title
            ))
            # Отправляем подтверждение об успешном создании
            await event.respond(f'Беседа "{chat_title}" успешно создана!')
        except ValueError:
            # Если get_entity не нашел пользователя
            await event.respond(f'Ошибка: Пользователь "{username_to_add}" не найден. Проверьте ник.')
        except Exception as e:
            # Обработка других возможных ошибок
            await event.respond(f'Произошла ошибка при создании беседы с {username_to_add}: {e}')
    else:
        await event.respond('Эту команду можно использовать только в личном чате со мной.')

# --- Главная функция для запуска бота ---
async def main():
    print("Запускаю клиент Telegram...")
    # Запускаем клиент. Если это первый запуск, Telethon запросит номер телефона и код авторизации.
    await client.start(phone=PHONE_NUMBER)
    print("Клиент запущен. Бот готов к работе!")
    # Бот будет работать до тех пор, пока не будет отключен (например, по Ctrl+C)
    await client.run_until_disconnected()

# --- Точка входа в скрипт ---
if __name__ == '__main__':
    import asyncio
    # Запускаем асинхронную функцию main
    asyncio.run(main())
